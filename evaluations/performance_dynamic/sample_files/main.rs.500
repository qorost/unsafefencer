
unsafe fn test_plugin_1 () {
    println!("This is function 1");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_2 () {
    println!("This is function 2");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_3 () {
    println!("This is function 3");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_4 () {
    println!("This is function 4");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_5 () {
    println!("This is function 5");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_6 () {
    println!("This is function 6");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_7 () {
    println!("This is function 7");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_8 () {
    println!("This is function 8");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_9 () {
    println!("This is function 9");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_10 () {
    println!("This is function 10");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_11 () {
    println!("This is function 11");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_12 () {
    println!("This is function 12");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_13 () {
    println!("This is function 13");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_14 () {
    println!("This is function 14");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_15 () {
    println!("This is function 15");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_16 () {
    println!("This is function 16");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_17 () {
    println!("This is function 17");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_18 () {
    println!("This is function 18");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_19 () {
    println!("This is function 19");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_20 () {
    println!("This is function 20");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_21 () {
    println!("This is function 21");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_22 () {
    println!("This is function 22");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_23 () {
    println!("This is function 23");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_24 () {
    println!("This is function 24");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_25 () {
    println!("This is function 25");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_26 () {
    println!("This is function 26");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_27 () {
    println!("This is function 27");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_28 () {
    println!("This is function 28");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_29 () {
    println!("This is function 29");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_30 () {
    println!("This is function 30");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_31 () {
    println!("This is function 31");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_32 () {
    println!("This is function 32");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_33 () {
    println!("This is function 33");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_34 () {
    println!("This is function 34");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_35 () {
    println!("This is function 35");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_36 () {
    println!("This is function 36");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_37 () {
    println!("This is function 37");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_38 () {
    println!("This is function 38");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_39 () {
    println!("This is function 39");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_40 () {
    println!("This is function 40");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_41 () {
    println!("This is function 41");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_42 () {
    println!("This is function 42");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_43 () {
    println!("This is function 43");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_44 () {
    println!("This is function 44");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_45 () {
    println!("This is function 45");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_46 () {
    println!("This is function 46");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_47 () {
    println!("This is function 47");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_48 () {
    println!("This is function 48");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_49 () {
    println!("This is function 49");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_50 () {
    println!("This is function 50");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_51 () {
    println!("This is function 51");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_52 () {
    println!("This is function 52");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_53 () {
    println!("This is function 53");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_54 () {
    println!("This is function 54");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_55 () {
    println!("This is function 55");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_56 () {
    println!("This is function 56");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_57 () {
    println!("This is function 57");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_58 () {
    println!("This is function 58");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_59 () {
    println!("This is function 59");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_60 () {
    println!("This is function 60");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_61 () {
    println!("This is function 61");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_62 () {
    println!("This is function 62");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_63 () {
    println!("This is function 63");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_64 () {
    println!("This is function 64");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_65 () {
    println!("This is function 65");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_66 () {
    println!("This is function 66");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_67 () {
    println!("This is function 67");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_68 () {
    println!("This is function 68");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_69 () {
    println!("This is function 69");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_70 () {
    println!("This is function 70");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_71 () {
    println!("This is function 71");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_72 () {
    println!("This is function 72");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_73 () {
    println!("This is function 73");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_74 () {
    println!("This is function 74");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_75 () {
    println!("This is function 75");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_76 () {
    println!("This is function 76");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_77 () {
    println!("This is function 77");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_78 () {
    println!("This is function 78");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_79 () {
    println!("This is function 79");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_80 () {
    println!("This is function 80");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_81 () {
    println!("This is function 81");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_82 () {
    println!("This is function 82");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_83 () {
    println!("This is function 83");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_84 () {
    println!("This is function 84");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_85 () {
    println!("This is function 85");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_86 () {
    println!("This is function 86");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_87 () {
    println!("This is function 87");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_88 () {
    println!("This is function 88");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_89 () {
    println!("This is function 89");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_90 () {
    println!("This is function 90");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_91 () {
    println!("This is function 91");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_92 () {
    println!("This is function 92");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_93 () {
    println!("This is function 93");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_94 () {
    println!("This is function 94");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_95 () {
    println!("This is function 95");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_96 () {
    println!("This is function 96");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_97 () {
    println!("This is function 97");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_98 () {
    println!("This is function 98");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_99 () {
    println!("This is function 99");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_100 () {
    println!("This is function 100");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_101 () {
    println!("This is function 101");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_102 () {
    println!("This is function 102");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_103 () {
    println!("This is function 103");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_104 () {
    println!("This is function 104");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_105 () {
    println!("This is function 105");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_106 () {
    println!("This is function 106");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_107 () {
    println!("This is function 107");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_108 () {
    println!("This is function 108");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_109 () {
    println!("This is function 109");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_110 () {
    println!("This is function 110");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_111 () {
    println!("This is function 111");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_112 () {
    println!("This is function 112");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_113 () {
    println!("This is function 113");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_114 () {
    println!("This is function 114");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_115 () {
    println!("This is function 115");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_116 () {
    println!("This is function 116");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_117 () {
    println!("This is function 117");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_118 () {
    println!("This is function 118");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_119 () {
    println!("This is function 119");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_120 () {
    println!("This is function 120");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_121 () {
    println!("This is function 121");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_122 () {
    println!("This is function 122");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_123 () {
    println!("This is function 123");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_124 () {
    println!("This is function 124");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_125 () {
    println!("This is function 125");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_126 () {
    println!("This is function 126");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_127 () {
    println!("This is function 127");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_128 () {
    println!("This is function 128");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_129 () {
    println!("This is function 129");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_130 () {
    println!("This is function 130");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_131 () {
    println!("This is function 131");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_132 () {
    println!("This is function 132");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_133 () {
    println!("This is function 133");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_134 () {
    println!("This is function 134");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_135 () {
    println!("This is function 135");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_136 () {
    println!("This is function 136");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_137 () {
    println!("This is function 137");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_138 () {
    println!("This is function 138");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_139 () {
    println!("This is function 139");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_140 () {
    println!("This is function 140");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_141 () {
    println!("This is function 141");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_142 () {
    println!("This is function 142");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_143 () {
    println!("This is function 143");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_144 () {
    println!("This is function 144");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_145 () {
    println!("This is function 145");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_146 () {
    println!("This is function 146");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_147 () {
    println!("This is function 147");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_148 () {
    println!("This is function 148");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_149 () {
    println!("This is function 149");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_150 () {
    println!("This is function 150");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_151 () {
    println!("This is function 151");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_152 () {
    println!("This is function 152");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_153 () {
    println!("This is function 153");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_154 () {
    println!("This is function 154");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_155 () {
    println!("This is function 155");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_156 () {
    println!("This is function 156");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_157 () {
    println!("This is function 157");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_158 () {
    println!("This is function 158");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_159 () {
    println!("This is function 159");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_160 () {
    println!("This is function 160");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_161 () {
    println!("This is function 161");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_162 () {
    println!("This is function 162");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_163 () {
    println!("This is function 163");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_164 () {
    println!("This is function 164");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_165 () {
    println!("This is function 165");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_166 () {
    println!("This is function 166");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_167 () {
    println!("This is function 167");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_168 () {
    println!("This is function 168");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_169 () {
    println!("This is function 169");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_170 () {
    println!("This is function 170");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_171 () {
    println!("This is function 171");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_172 () {
    println!("This is function 172");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_173 () {
    println!("This is function 173");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_174 () {
    println!("This is function 174");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_175 () {
    println!("This is function 175");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_176 () {
    println!("This is function 176");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_177 () {
    println!("This is function 177");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_178 () {
    println!("This is function 178");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_179 () {
    println!("This is function 179");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_180 () {
    println!("This is function 180");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_181 () {
    println!("This is function 181");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_182 () {
    println!("This is function 182");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_183 () {
    println!("This is function 183");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_184 () {
    println!("This is function 184");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_185 () {
    println!("This is function 185");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_186 () {
    println!("This is function 186");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_187 () {
    println!("This is function 187");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_188 () {
    println!("This is function 188");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_189 () {
    println!("This is function 189");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_190 () {
    println!("This is function 190");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_191 () {
    println!("This is function 191");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_192 () {
    println!("This is function 192");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_193 () {
    println!("This is function 193");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_194 () {
    println!("This is function 194");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_195 () {
    println!("This is function 195");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_196 () {
    println!("This is function 196");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_197 () {
    println!("This is function 197");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_198 () {
    println!("This is function 198");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_199 () {
    println!("This is function 199");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_200 () {
    println!("This is function 200");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_201 () {
    println!("This is function 201");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_202 () {
    println!("This is function 202");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_203 () {
    println!("This is function 203");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_204 () {
    println!("This is function 204");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_205 () {
    println!("This is function 205");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_206 () {
    println!("This is function 206");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_207 () {
    println!("This is function 207");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_208 () {
    println!("This is function 208");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_209 () {
    println!("This is function 209");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_210 () {
    println!("This is function 210");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_211 () {
    println!("This is function 211");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_212 () {
    println!("This is function 212");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_213 () {
    println!("This is function 213");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_214 () {
    println!("This is function 214");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_215 () {
    println!("This is function 215");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_216 () {
    println!("This is function 216");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_217 () {
    println!("This is function 217");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_218 () {
    println!("This is function 218");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_219 () {
    println!("This is function 219");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_220 () {
    println!("This is function 220");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_221 () {
    println!("This is function 221");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_222 () {
    println!("This is function 222");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_223 () {
    println!("This is function 223");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_224 () {
    println!("This is function 224");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_225 () {
    println!("This is function 225");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_226 () {
    println!("This is function 226");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_227 () {
    println!("This is function 227");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_228 () {
    println!("This is function 228");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_229 () {
    println!("This is function 229");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_230 () {
    println!("This is function 230");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_231 () {
    println!("This is function 231");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_232 () {
    println!("This is function 232");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_233 () {
    println!("This is function 233");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_234 () {
    println!("This is function 234");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_235 () {
    println!("This is function 235");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_236 () {
    println!("This is function 236");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_237 () {
    println!("This is function 237");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_238 () {
    println!("This is function 238");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_239 () {
    println!("This is function 239");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_240 () {
    println!("This is function 240");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_241 () {
    println!("This is function 241");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_242 () {
    println!("This is function 242");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_243 () {
    println!("This is function 243");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_244 () {
    println!("This is function 244");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_245 () {
    println!("This is function 245");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_246 () {
    println!("This is function 246");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_247 () {
    println!("This is function 247");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_248 () {
    println!("This is function 248");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_249 () {
    println!("This is function 249");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_250 () {
    println!("This is function 250");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_251 () {
    println!("This is function 251");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_252 () {
    println!("This is function 252");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_253 () {
    println!("This is function 253");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_254 () {
    println!("This is function 254");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_255 () {
    println!("This is function 255");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_256 () {
    println!("This is function 256");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_257 () {
    println!("This is function 257");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_258 () {
    println!("This is function 258");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_259 () {
    println!("This is function 259");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_260 () {
    println!("This is function 260");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_261 () {
    println!("This is function 261");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_262 () {
    println!("This is function 262");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_263 () {
    println!("This is function 263");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_264 () {
    println!("This is function 264");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_265 () {
    println!("This is function 265");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_266 () {
    println!("This is function 266");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_267 () {
    println!("This is function 267");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_268 () {
    println!("This is function 268");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_269 () {
    println!("This is function 269");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_270 () {
    println!("This is function 270");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_271 () {
    println!("This is function 271");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_272 () {
    println!("This is function 272");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_273 () {
    println!("This is function 273");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_274 () {
    println!("This is function 274");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_275 () {
    println!("This is function 275");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_276 () {
    println!("This is function 276");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_277 () {
    println!("This is function 277");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_278 () {
    println!("This is function 278");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_279 () {
    println!("This is function 279");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_280 () {
    println!("This is function 280");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_281 () {
    println!("This is function 281");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_282 () {
    println!("This is function 282");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_283 () {
    println!("This is function 283");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_284 () {
    println!("This is function 284");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_285 () {
    println!("This is function 285");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_286 () {
    println!("This is function 286");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_287 () {
    println!("This is function 287");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_288 () {
    println!("This is function 288");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_289 () {
    println!("This is function 289");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_290 () {
    println!("This is function 290");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_291 () {
    println!("This is function 291");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_292 () {
    println!("This is function 292");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_293 () {
    println!("This is function 293");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_294 () {
    println!("This is function 294");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_295 () {
    println!("This is function 295");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_296 () {
    println!("This is function 296");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_297 () {
    println!("This is function 297");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_298 () {
    println!("This is function 298");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_299 () {
    println!("This is function 299");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_300 () {
    println!("This is function 300");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_301 () {
    println!("This is function 301");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_302 () {
    println!("This is function 302");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_303 () {
    println!("This is function 303");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_304 () {
    println!("This is function 304");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_305 () {
    println!("This is function 305");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_306 () {
    println!("This is function 306");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_307 () {
    println!("This is function 307");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_308 () {
    println!("This is function 308");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_309 () {
    println!("This is function 309");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_310 () {
    println!("This is function 310");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_311 () {
    println!("This is function 311");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_312 () {
    println!("This is function 312");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_313 () {
    println!("This is function 313");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_314 () {
    println!("This is function 314");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_315 () {
    println!("This is function 315");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_316 () {
    println!("This is function 316");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_317 () {
    println!("This is function 317");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_318 () {
    println!("This is function 318");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_319 () {
    println!("This is function 319");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_320 () {
    println!("This is function 320");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_321 () {
    println!("This is function 321");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_322 () {
    println!("This is function 322");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_323 () {
    println!("This is function 323");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_324 () {
    println!("This is function 324");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_325 () {
    println!("This is function 325");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_326 () {
    println!("This is function 326");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_327 () {
    println!("This is function 327");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_328 () {
    println!("This is function 328");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_329 () {
    println!("This is function 329");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_330 () {
    println!("This is function 330");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_331 () {
    println!("This is function 331");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_332 () {
    println!("This is function 332");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_333 () {
    println!("This is function 333");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_334 () {
    println!("This is function 334");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_335 () {
    println!("This is function 335");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_336 () {
    println!("This is function 336");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_337 () {
    println!("This is function 337");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_338 () {
    println!("This is function 338");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_339 () {
    println!("This is function 339");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_340 () {
    println!("This is function 340");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_341 () {
    println!("This is function 341");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_342 () {
    println!("This is function 342");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_343 () {
    println!("This is function 343");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_344 () {
    println!("This is function 344");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_345 () {
    println!("This is function 345");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_346 () {
    println!("This is function 346");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_347 () {
    println!("This is function 347");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_348 () {
    println!("This is function 348");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_349 () {
    println!("This is function 349");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_350 () {
    println!("This is function 350");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_351 () {
    println!("This is function 351");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_352 () {
    println!("This is function 352");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_353 () {
    println!("This is function 353");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_354 () {
    println!("This is function 354");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_355 () {
    println!("This is function 355");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_356 () {
    println!("This is function 356");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_357 () {
    println!("This is function 357");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_358 () {
    println!("This is function 358");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_359 () {
    println!("This is function 359");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_360 () {
    println!("This is function 360");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_361 () {
    println!("This is function 361");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_362 () {
    println!("This is function 362");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_363 () {
    println!("This is function 363");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_364 () {
    println!("This is function 364");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_365 () {
    println!("This is function 365");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_366 () {
    println!("This is function 366");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_367 () {
    println!("This is function 367");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_368 () {
    println!("This is function 368");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_369 () {
    println!("This is function 369");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_370 () {
    println!("This is function 370");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_371 () {
    println!("This is function 371");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_372 () {
    println!("This is function 372");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_373 () {
    println!("This is function 373");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_374 () {
    println!("This is function 374");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_375 () {
    println!("This is function 375");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_376 () {
    println!("This is function 376");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_377 () {
    println!("This is function 377");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_378 () {
    println!("This is function 378");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_379 () {
    println!("This is function 379");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_380 () {
    println!("This is function 380");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_381 () {
    println!("This is function 381");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_382 () {
    println!("This is function 382");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_383 () {
    println!("This is function 383");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_384 () {
    println!("This is function 384");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_385 () {
    println!("This is function 385");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_386 () {
    println!("This is function 386");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_387 () {
    println!("This is function 387");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_388 () {
    println!("This is function 388");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_389 () {
    println!("This is function 389");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_390 () {
    println!("This is function 390");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_391 () {
    println!("This is function 391");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_392 () {
    println!("This is function 392");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_393 () {
    println!("This is function 393");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_394 () {
    println!("This is function 394");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_395 () {
    println!("This is function 395");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_396 () {
    println!("This is function 396");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_397 () {
    println!("This is function 397");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_398 () {
    println!("This is function 398");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_399 () {
    println!("This is function 399");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_400 () {
    println!("This is function 400");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_401 () {
    println!("This is function 401");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_402 () {
    println!("This is function 402");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_403 () {
    println!("This is function 403");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_404 () {
    println!("This is function 404");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_405 () {
    println!("This is function 405");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_406 () {
    println!("This is function 406");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_407 () {
    println!("This is function 407");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_408 () {
    println!("This is function 408");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_409 () {
    println!("This is function 409");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_410 () {
    println!("This is function 410");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_411 () {
    println!("This is function 411");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_412 () {
    println!("This is function 412");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_413 () {
    println!("This is function 413");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_414 () {
    println!("This is function 414");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_415 () {
    println!("This is function 415");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_416 () {
    println!("This is function 416");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_417 () {
    println!("This is function 417");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_418 () {
    println!("This is function 418");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_419 () {
    println!("This is function 419");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_420 () {
    println!("This is function 420");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_421 () {
    println!("This is function 421");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_422 () {
    println!("This is function 422");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_423 () {
    println!("This is function 423");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_424 () {
    println!("This is function 424");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_425 () {
    println!("This is function 425");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_426 () {
    println!("This is function 426");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_427 () {
    println!("This is function 427");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_428 () {
    println!("This is function 428");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_429 () {
    println!("This is function 429");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_430 () {
    println!("This is function 430");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_431 () {
    println!("This is function 431");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_432 () {
    println!("This is function 432");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_433 () {
    println!("This is function 433");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_434 () {
    println!("This is function 434");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_435 () {
    println!("This is function 435");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_436 () {
    println!("This is function 436");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_437 () {
    println!("This is function 437");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_438 () {
    println!("This is function 438");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_439 () {
    println!("This is function 439");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_440 () {
    println!("This is function 440");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_441 () {
    println!("This is function 441");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_442 () {
    println!("This is function 442");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_443 () {
    println!("This is function 443");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_444 () {
    println!("This is function 444");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_445 () {
    println!("This is function 445");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_446 () {
    println!("This is function 446");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_447 () {
    println!("This is function 447");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_448 () {
    println!("This is function 448");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_449 () {
    println!("This is function 449");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_450 () {
    println!("This is function 450");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_451 () {
    println!("This is function 451");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_452 () {
    println!("This is function 452");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_453 () {
    println!("This is function 453");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_454 () {
    println!("This is function 454");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_455 () {
    println!("This is function 455");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_456 () {
    println!("This is function 456");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_457 () {
    println!("This is function 457");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_458 () {
    println!("This is function 458");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_459 () {
    println!("This is function 459");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_460 () {
    println!("This is function 460");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_461 () {
    println!("This is function 461");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_462 () {
    println!("This is function 462");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_463 () {
    println!("This is function 463");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_464 () {
    println!("This is function 464");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_465 () {
    println!("This is function 465");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_466 () {
    println!("This is function 466");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_467 () {
    println!("This is function 467");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_468 () {
    println!("This is function 468");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_469 () {
    println!("This is function 469");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_470 () {
    println!("This is function 470");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_471 () {
    println!("This is function 471");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_472 () {
    println!("This is function 472");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_473 () {
    println!("This is function 473");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_474 () {
    println!("This is function 474");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_475 () {
    println!("This is function 475");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_476 () {
    println!("This is function 476");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_477 () {
    println!("This is function 477");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_478 () {
    println!("This is function 478");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_479 () {
    println!("This is function 479");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_480 () {
    println!("This is function 480");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_481 () {
    println!("This is function 481");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_482 () {
    println!("This is function 482");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_483 () {
    println!("This is function 483");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_484 () {
    println!("This is function 484");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_485 () {
    println!("This is function 485");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_486 () {
    println!("This is function 486");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_487 () {
    println!("This is function 487");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_488 () {
    println!("This is function 488");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_489 () {
    println!("This is function 489");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_490 () {
    println!("This is function 490");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_491 () {
    println!("This is function 491");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_492 () {
    println!("This is function 492");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_493 () {
    println!("This is function 493");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_494 () {
    println!("This is function 494");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_495 () {
    println!("This is function 495");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_496 () {
    println!("This is function 496");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_497 () {
    println!("This is function 497");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_498 () {
    println!("This is function 498");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_499 () {
    println!("This is function 499");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}

unsafe fn test_plugin_500 () {
    println!("This is function 500");
    struct AA {x: i32};
    let x:AA =  AA{x:32,};
    let mut y:AA = AA{x:63,};

    let p = &x as *const AA;
    let t = (*p).x;

    //(*p).x = 10;
    let py = &mut y as *mut AA;
    (*py).x = t;
    y.x = 20;
    unsafe fn test_deref<'a>(i: &'a AA) -> i32{
        i.x
    }
    test_deref(&y);
}
fn main() {
	unsafe {
		test_plugin_1();
		test_plugin_2();
		test_plugin_3();
		test_plugin_4();
		test_plugin_5();
		test_plugin_6();
		test_plugin_7();
		test_plugin_8();
		test_plugin_9();
		test_plugin_10();
		test_plugin_11();
		test_plugin_12();
		test_plugin_13();
		test_plugin_14();
		test_plugin_15();
		test_plugin_16();
		test_plugin_17();
		test_plugin_18();
		test_plugin_19();
		test_plugin_20();
		test_plugin_21();
		test_plugin_22();
		test_plugin_23();
		test_plugin_24();
		test_plugin_25();
		test_plugin_26();
		test_plugin_27();
		test_plugin_28();
		test_plugin_29();
		test_plugin_30();
		test_plugin_31();
		test_plugin_32();
		test_plugin_33();
		test_plugin_34();
		test_plugin_35();
		test_plugin_36();
		test_plugin_37();
		test_plugin_38();
		test_plugin_39();
		test_plugin_40();
		test_plugin_41();
		test_plugin_42();
		test_plugin_43();
		test_plugin_44();
		test_plugin_45();
		test_plugin_46();
		test_plugin_47();
		test_plugin_48();
		test_plugin_49();
		test_plugin_50();
		test_plugin_51();
		test_plugin_52();
		test_plugin_53();
		test_plugin_54();
		test_plugin_55();
		test_plugin_56();
		test_plugin_57();
		test_plugin_58();
		test_plugin_59();
		test_plugin_60();
		test_plugin_61();
		test_plugin_62();
		test_plugin_63();
		test_plugin_64();
		test_plugin_65();
		test_plugin_66();
		test_plugin_67();
		test_plugin_68();
		test_plugin_69();
		test_plugin_70();
		test_plugin_71();
		test_plugin_72();
		test_plugin_73();
		test_plugin_74();
		test_plugin_75();
		test_plugin_76();
		test_plugin_77();
		test_plugin_78();
		test_plugin_79();
		test_plugin_80();
		test_plugin_81();
		test_plugin_82();
		test_plugin_83();
		test_plugin_84();
		test_plugin_85();
		test_plugin_86();
		test_plugin_87();
		test_plugin_88();
		test_plugin_89();
		test_plugin_90();
		test_plugin_91();
		test_plugin_92();
		test_plugin_93();
		test_plugin_94();
		test_plugin_95();
		test_plugin_96();
		test_plugin_97();
		test_plugin_98();
		test_plugin_99();
		test_plugin_100();
		test_plugin_101();
		test_plugin_102();
		test_plugin_103();
		test_plugin_104();
		test_plugin_105();
		test_plugin_106();
		test_plugin_107();
		test_plugin_108();
		test_plugin_109();
		test_plugin_110();
		test_plugin_111();
		test_plugin_112();
		test_plugin_113();
		test_plugin_114();
		test_plugin_115();
		test_plugin_116();
		test_plugin_117();
		test_plugin_118();
		test_plugin_119();
		test_plugin_120();
		test_plugin_121();
		test_plugin_122();
		test_plugin_123();
		test_plugin_124();
		test_plugin_125();
		test_plugin_126();
		test_plugin_127();
		test_plugin_128();
		test_plugin_129();
		test_plugin_130();
		test_plugin_131();
		test_plugin_132();
		test_plugin_133();
		test_plugin_134();
		test_plugin_135();
		test_plugin_136();
		test_plugin_137();
		test_plugin_138();
		test_plugin_139();
		test_plugin_140();
		test_plugin_141();
		test_plugin_142();
		test_plugin_143();
		test_plugin_144();
		test_plugin_145();
		test_plugin_146();
		test_plugin_147();
		test_plugin_148();
		test_plugin_149();
		test_plugin_150();
		test_plugin_151();
		test_plugin_152();
		test_plugin_153();
		test_plugin_154();
		test_plugin_155();
		test_plugin_156();
		test_plugin_157();
		test_plugin_158();
		test_plugin_159();
		test_plugin_160();
		test_plugin_161();
		test_plugin_162();
		test_plugin_163();
		test_plugin_164();
		test_plugin_165();
		test_plugin_166();
		test_plugin_167();
		test_plugin_168();
		test_plugin_169();
		test_plugin_170();
		test_plugin_171();
		test_plugin_172();
		test_plugin_173();
		test_plugin_174();
		test_plugin_175();
		test_plugin_176();
		test_plugin_177();
		test_plugin_178();
		test_plugin_179();
		test_plugin_180();
		test_plugin_181();
		test_plugin_182();
		test_plugin_183();
		test_plugin_184();
		test_plugin_185();
		test_plugin_186();
		test_plugin_187();
		test_plugin_188();
		test_plugin_189();
		test_plugin_190();
		test_plugin_191();
		test_plugin_192();
		test_plugin_193();
		test_plugin_194();
		test_plugin_195();
		test_plugin_196();
		test_plugin_197();
		test_plugin_198();
		test_plugin_199();
		test_plugin_200();
		test_plugin_201();
		test_plugin_202();
		test_plugin_203();
		test_plugin_204();
		test_plugin_205();
		test_plugin_206();
		test_plugin_207();
		test_plugin_208();
		test_plugin_209();
		test_plugin_210();
		test_plugin_211();
		test_plugin_212();
		test_plugin_213();
		test_plugin_214();
		test_plugin_215();
		test_plugin_216();
		test_plugin_217();
		test_plugin_218();
		test_plugin_219();
		test_plugin_220();
		test_plugin_221();
		test_plugin_222();
		test_plugin_223();
		test_plugin_224();
		test_plugin_225();
		test_plugin_226();
		test_plugin_227();
		test_plugin_228();
		test_plugin_229();
		test_plugin_230();
		test_plugin_231();
		test_plugin_232();
		test_plugin_233();
		test_plugin_234();
		test_plugin_235();
		test_plugin_236();
		test_plugin_237();
		test_plugin_238();
		test_plugin_239();
		test_plugin_240();
		test_plugin_241();
		test_plugin_242();
		test_plugin_243();
		test_plugin_244();
		test_plugin_245();
		test_plugin_246();
		test_plugin_247();
		test_plugin_248();
		test_plugin_249();
		test_plugin_250();
		test_plugin_251();
		test_plugin_252();
		test_plugin_253();
		test_plugin_254();
		test_plugin_255();
		test_plugin_256();
		test_plugin_257();
		test_plugin_258();
		test_plugin_259();
		test_plugin_260();
		test_plugin_261();
		test_plugin_262();
		test_plugin_263();
		test_plugin_264();
		test_plugin_265();
		test_plugin_266();
		test_plugin_267();
		test_plugin_268();
		test_plugin_269();
		test_plugin_270();
		test_plugin_271();
		test_plugin_272();
		test_plugin_273();
		test_plugin_274();
		test_plugin_275();
		test_plugin_276();
		test_plugin_277();
		test_plugin_278();
		test_plugin_279();
		test_plugin_280();
		test_plugin_281();
		test_plugin_282();
		test_plugin_283();
		test_plugin_284();
		test_plugin_285();
		test_plugin_286();
		test_plugin_287();
		test_plugin_288();
		test_plugin_289();
		test_plugin_290();
		test_plugin_291();
		test_plugin_292();
		test_plugin_293();
		test_plugin_294();
		test_plugin_295();
		test_plugin_296();
		test_plugin_297();
		test_plugin_298();
		test_plugin_299();
		test_plugin_300();
		test_plugin_301();
		test_plugin_302();
		test_plugin_303();
		test_plugin_304();
		test_plugin_305();
		test_plugin_306();
		test_plugin_307();
		test_plugin_308();
		test_plugin_309();
		test_plugin_310();
		test_plugin_311();
		test_plugin_312();
		test_plugin_313();
		test_plugin_314();
		test_plugin_315();
		test_plugin_316();
		test_plugin_317();
		test_plugin_318();
		test_plugin_319();
		test_plugin_320();
		test_plugin_321();
		test_plugin_322();
		test_plugin_323();
		test_plugin_324();
		test_plugin_325();
		test_plugin_326();
		test_plugin_327();
		test_plugin_328();
		test_plugin_329();
		test_plugin_330();
		test_plugin_331();
		test_plugin_332();
		test_plugin_333();
		test_plugin_334();
		test_plugin_335();
		test_plugin_336();
		test_plugin_337();
		test_plugin_338();
		test_plugin_339();
		test_plugin_340();
		test_plugin_341();
		test_plugin_342();
		test_plugin_343();
		test_plugin_344();
		test_plugin_345();
		test_plugin_346();
		test_plugin_347();
		test_plugin_348();
		test_plugin_349();
		test_plugin_350();
		test_plugin_351();
		test_plugin_352();
		test_plugin_353();
		test_plugin_354();
		test_plugin_355();
		test_plugin_356();
		test_plugin_357();
		test_plugin_358();
		test_plugin_359();
		test_plugin_360();
		test_plugin_361();
		test_plugin_362();
		test_plugin_363();
		test_plugin_364();
		test_plugin_365();
		test_plugin_366();
		test_plugin_367();
		test_plugin_368();
		test_plugin_369();
		test_plugin_370();
		test_plugin_371();
		test_plugin_372();
		test_plugin_373();
		test_plugin_374();
		test_plugin_375();
		test_plugin_376();
		test_plugin_377();
		test_plugin_378();
		test_plugin_379();
		test_plugin_380();
		test_plugin_381();
		test_plugin_382();
		test_plugin_383();
		test_plugin_384();
		test_plugin_385();
		test_plugin_386();
		test_plugin_387();
		test_plugin_388();
		test_plugin_389();
		test_plugin_390();
		test_plugin_391();
		test_plugin_392();
		test_plugin_393();
		test_plugin_394();
		test_plugin_395();
		test_plugin_396();
		test_plugin_397();
		test_plugin_398();
		test_plugin_399();
		test_plugin_400();
		test_plugin_401();
		test_plugin_402();
		test_plugin_403();
		test_plugin_404();
		test_plugin_405();
		test_plugin_406();
		test_plugin_407();
		test_plugin_408();
		test_plugin_409();
		test_plugin_410();
		test_plugin_411();
		test_plugin_412();
		test_plugin_413();
		test_plugin_414();
		test_plugin_415();
		test_plugin_416();
		test_plugin_417();
		test_plugin_418();
		test_plugin_419();
		test_plugin_420();
		test_plugin_421();
		test_plugin_422();
		test_plugin_423();
		test_plugin_424();
		test_plugin_425();
		test_plugin_426();
		test_plugin_427();
		test_plugin_428();
		test_plugin_429();
		test_plugin_430();
		test_plugin_431();
		test_plugin_432();
		test_plugin_433();
		test_plugin_434();
		test_plugin_435();
		test_plugin_436();
		test_plugin_437();
		test_plugin_438();
		test_plugin_439();
		test_plugin_440();
		test_plugin_441();
		test_plugin_442();
		test_plugin_443();
		test_plugin_444();
		test_plugin_445();
		test_plugin_446();
		test_plugin_447();
		test_plugin_448();
		test_plugin_449();
		test_plugin_450();
		test_plugin_451();
		test_plugin_452();
		test_plugin_453();
		test_plugin_454();
		test_plugin_455();
		test_plugin_456();
		test_plugin_457();
		test_plugin_458();
		test_plugin_459();
		test_plugin_460();
		test_plugin_461();
		test_plugin_462();
		test_plugin_463();
		test_plugin_464();
		test_plugin_465();
		test_plugin_466();
		test_plugin_467();
		test_plugin_468();
		test_plugin_469();
		test_plugin_470();
		test_plugin_471();
		test_plugin_472();
		test_plugin_473();
		test_plugin_474();
		test_plugin_475();
		test_plugin_476();
		test_plugin_477();
		test_plugin_478();
		test_plugin_479();
		test_plugin_480();
		test_plugin_481();
		test_plugin_482();
		test_plugin_483();
		test_plugin_484();
		test_plugin_485();
		test_plugin_486();
		test_plugin_487();
		test_plugin_488();
		test_plugin_489();
		test_plugin_490();
		test_plugin_491();
		test_plugin_492();
		test_plugin_493();
		test_plugin_494();
		test_plugin_495();
		test_plugin_496();
		test_plugin_497();
		test_plugin_498();
		test_plugin_499();
		test_plugin_500();
	}
}